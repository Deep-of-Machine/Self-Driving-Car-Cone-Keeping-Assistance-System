// Generated by gencpp from file lidar_pkg/yolo_lavacon.msg
// DO NOT EDIT!


#ifndef LIDAR_PKG_MESSAGE_YOLO_LAVACON_H
#define LIDAR_PKG_MESSAGE_YOLO_LAVACON_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lidar_pkg
{
template <class ContainerAllocator>
struct yolo_lavacon_
{
  typedef yolo_lavacon_<ContainerAllocator> Type;

  yolo_lavacon_()
    : yolo_mid_X(0.0)
    , yolo_mid_y(0.0)
    , yolo_con_name()
    , yolo_con_color()  {
    }
  yolo_lavacon_(const ContainerAllocator& _alloc)
    : yolo_mid_X(0.0)
    , yolo_mid_y(0.0)
    , yolo_con_name(_alloc)
    , yolo_con_color(_alloc)  {
  (void)_alloc;
    }



   typedef double _yolo_mid_X_type;
  _yolo_mid_X_type yolo_mid_X;

   typedef double _yolo_mid_y_type;
  _yolo_mid_y_type yolo_mid_y;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _yolo_con_name_type;
  _yolo_con_name_type yolo_con_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _yolo_con_color_type;
  _yolo_con_color_type yolo_con_color;





  typedef boost::shared_ptr< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> const> ConstPtr;

}; // struct yolo_lavacon_

typedef ::lidar_pkg::yolo_lavacon_<std::allocator<void> > yolo_lavacon;

typedef boost::shared_ptr< ::lidar_pkg::yolo_lavacon > yolo_lavaconPtr;
typedef boost::shared_ptr< ::lidar_pkg::yolo_lavacon const> yolo_lavaconConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lidar_pkg::yolo_lavacon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lidar_pkg::yolo_lavacon_<ContainerAllocator1> & lhs, const ::lidar_pkg::yolo_lavacon_<ContainerAllocator2> & rhs)
{
  return lhs.yolo_mid_X == rhs.yolo_mid_X &&
    lhs.yolo_mid_y == rhs.yolo_mid_y &&
    lhs.yolo_con_name == rhs.yolo_con_name &&
    lhs.yolo_con_color == rhs.yolo_con_color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lidar_pkg::yolo_lavacon_<ContainerAllocator1> & lhs, const ::lidar_pkg::yolo_lavacon_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lidar_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da269e966072bed82c14a04982ff80e5";
  }

  static const char* value(const ::lidar_pkg::yolo_lavacon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda269e966072bed8ULL;
  static const uint64_t static_value2 = 0x2c14a04982ff80e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lidar_pkg/yolo_lavacon";
  }

  static const char* value(const ::lidar_pkg::yolo_lavacon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 yolo_mid_X\n"
"float64 yolo_mid_y\n"
"string yolo_con_name\n"
"string yolo_con_color\n"
;
  }

  static const char* value(const ::lidar_pkg::yolo_lavacon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yolo_mid_X);
      stream.next(m.yolo_mid_y);
      stream.next(m.yolo_con_name);
      stream.next(m.yolo_con_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yolo_lavacon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lidar_pkg::yolo_lavacon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lidar_pkg::yolo_lavacon_<ContainerAllocator>& v)
  {
    s << indent << "yolo_mid_X: ";
    Printer<double>::stream(s, indent + "  ", v.yolo_mid_X);
    s << indent << "yolo_mid_y: ";
    Printer<double>::stream(s, indent + "  ", v.yolo_mid_y);
    s << indent << "yolo_con_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.yolo_con_name);
    s << indent << "yolo_con_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.yolo_con_color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIDAR_PKG_MESSAGE_YOLO_LAVACON_H
